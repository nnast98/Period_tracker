import datetime
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn.preprocessing import LabelEncoder


class Periodtracker():
    def __init__(self, name, age, weight, height, sex, gender, cycle):
        self.name = name
        self.age = age
        self.weight = weight
        self.height = height
        self.sex = sex
        self.gender = gender
        self.cycle = cycle

    def find_next_day(self):
        current_date = datetime.datetime.now()
        current_day = current_date.strftime("%A")
        current_index = self.cycle.index(current_day)
        next_index = (current_index + 1) % len(self.cycle)
        return self.cycle[next_index]

    def predict_symptoms(self):
        # Create a DataFrame with user information
        data = {
            "Age": [self.age],
            "Weight": [self.weight],
            "Height": [self.height],
            "Sex": [self.sex],
            "Gender": [self.gender],
        }
        user_data = pd.DataFrame(data)

        
        label_encoders = {}
        categorical_cols = ["Sex", "Gender"]
        for col in categorical_cols:
            le = LabelEncoder()
            user_data[col] = le.fit_transform(user_data[col])
            label_encoders[col] = le

        # Load a pre-trained decision tree model (you can train your own model)
        # For simplicity, we're using a basic model without training here
        model = DecisionTreeClassifier()

        # Predict the next day's symptoms
        next_day = self.find_next_day()
        symptoms = self.symptoms(next_day)
        X = user_data.values
        prediction = model.predict(X)

        # Create a plot to visualize the predicted symptoms
        plt.figure(figsize=(8, 4))
        colors = {"Mood Swings": "blue", "Pain": "red", "Period": "purple"}

        for symptom in symptoms:
            plt.bar(symptom, 1, color=colors[symptom])

        plt.title(f"Predicted Symptoms for {next_day}")
        plt.xlabel("Symptoms")
        plt.ylabel("Intensity")
        plt.ylim(0, 1.5)  # Adjust the y-axis limit for better visualization

        plt.show()


# User's input
name = input("Enter your name: ")
age = int(input("Enter your age: "))
weight = float(input("Enter your weight (in kg): "))
height = float(input("Enter your height (in cm): "))
sex = input("Enter your sex: ")
gender = input("Enter your gender: ")
cycle_of_days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

tracker = Periodtracker(name, age, weight, height, sex, gender, cycle_of_days)

tracker.predict_symptoms()
